#!/usr/bin/python3

# This script will create a binary qemu-wrapper for a franken-chroot.
# 
# Call like so: wrapper-build arm-64bit
#
# It will then create a wrapper called /tmp/qemu-arm-64bit-wrapper ready to copy into the chroot.

import sys
import os
from fchroot.qemu import qemu_arch_settings

wrapper_code = """#include <string.h>
#include <unistd.h>

int main(int argc, char **argv, char **envp) {{
	char *newargv[argc + 3];

	newargv[0] = argv[0];
	newargv[1] = "-cpu";
	newargv[2] = "{qemu_cpu}";

	memcpy(&newargv[3], &argv[1], sizeof(*argv) * (argc -1));
	newargv[argc + 2] = NULL;
	return execve("/usr/local/bin/{qemu_binary}", newargv, envp);
}}
"""

if __name__ == "__main__":
	if len(sys.argv) < 2 or sys.argv[1] not in qemu_arch_settings.keys():
		print("Please specify one of: %s." % ", ".join(qemu_arch_settings.keys()))
		sys.exit(1)

	qemu_arch = sys.argv[1]
	qemu_binary_path = "/usr/bin/%s" % qemu_arch_settings[qemu_arch]['qemu_binary']
	
	if not os.path.exists(qemu_binary_path):
		print("Please ensure that %s exists first." % qemu_binary_path)
		sys.exit(1)

	with open("/tmp/qemu-wrapper.c", "w") as f:
		f.write(wrapper_code.format(**qemu_arch_settings[qemu_arch]))

	os.system("cd /tmp; gcc -static -O3 -s -o qemu-{qemu_arch}-wrapper qemu-wrapper.c".format(qemu_arch=qemu_arch))

# vim: ts=4 sw=4 noet
